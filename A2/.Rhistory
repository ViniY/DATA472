knitr::opts_chunk$set(echo = TRUE,error = TRUE)
parahraphs = grep("Darcy",mydataClean)
print(length(parahraphs))
#Q12
con <- file("pride-and-prejudice.txt","r", blocking= FALSE)
mydata = readLines(con)
length(mydata)
mydataClean = mydata[mydata!=""]
print(length(mydataClean))
mydataClean = mydata[mydata!=""]
print(length(mydataClean))
parahraphs = grep("Darcy",mydataClean)
print(length(parahraphs))
parahraphs = grep("Mr. Darcy",mydataClean)
mydataClean[parahraphs[20]]
counter= 0
temp = unlist(strsplit(mydataClean," "))
numbers = grep("Darcy",temp,ignore.case = TRUE)
length(numbers)
counter= 0
temp = unlist(strsplit(mydataClean," "))
numbers = grep("Darcy",temp)
length(numbers)
mydataClean = mydata[mydata!=""]
print(length(mydataClean))
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = nzTime - minutes(30)
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = nzTime - 0.5*60*60
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = nzTime$hour - 0.5
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXlt(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = nzTime$hour - 0.5
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = nzTime$hour - 0.5
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = nzTime - as.difftime(30,units = "mins")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30,units = "mins")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30*(1),units = "mins")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30,units = "mins")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(0,units = "mins")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",nzTime,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30,units = "mins")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",finalResult,"\n")
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30,units = "mins")
finalResult = format(finalResult,tz="Pacific/Auckland")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",finalResult,"\n")
knitr::opts_chunk$set(echo = TRUE,error = TRUE)
library(DBI)
library(RSQLite)
# Q1
tournaments <- read.csv(file = "ACtournaments.csv")
races <- read.csv(file = "ACraces.csv", stringsAsFactors = FALSE)
results <- read.csv(file ="ACresults.csv")
head(tournaments)
head(results)
head(races)
#Q2
races$Racedate <- as.Date(races$Date,format = "%d-%b")
races$Racedate <-format(races$Racedate, "%m-%d")
head(races)
#any(is.na(races$Racedate))
#Q3
minDate  = min(races$Racedate, na.rm=TRUE)
maxDate = max(races$Racedate, na.rm=TRUE)
days = as.Date(maxDate, format="%m-%d")- as.Date(minDate, format="%m-%d")
cat("The first date of the race is : " ,minDate,"\n")
cat("The last date of the race is : " ,maxDate,"\n")
cat("The number of day in between : ", days)
#Q4
fn = "AmericasCup.sqlite"
if (file.exists(fn)){
file.remove(fn)
}
americas <- dbConnect(RSQLite::SQLite(), "AmericasCup.sqlite")
#Q5
dbWriteTable(americas, "tournaments", tournaments,overwrite=TRUE)
dbWriteTable(americas, "races", races,overwrite=TRUE)
dbWriteTable(americas, "results", results,overwrite=TRUE)
knitr::opts_chunk$set(echo = TRUE,error = TRUE)
library(DBI)
library(RSQLite)
# Q1
tournaments <- read.csv(file = "ACtournaments.csv")
races <- read.csv(file = "ACraces.csv", stringsAsFactors = FALSE)
results <- read.csv(file ="ACresults.csv")
head(tournaments)
head(results)
head(races)
#Q2
races$Racedate <- as.Date(races$Date,format = "%d-%b")
races$Racedate <-format(races$Racedate, "%m-%d")
head(races)
#any(is.na(races$Racedate))
#Q3
minDate  = min(races$Racedate, na.rm=TRUE)
maxDate = max(races$Racedate, na.rm=TRUE)
days = as.Date(maxDate, format="%m-%d")- as.Date(minDate, format="%m-%d")
cat("The first date of the race is : " ,minDate,"\n")
cat("The last date of the race is : " ,maxDate,"\n")
cat("The number of day in between : ", days)
#Q4
fn = "AmericasCup.sqlite"
if (file.exists(fn)){
file.remove(fn)
}
americas <- dbConnect(RSQLite::SQLite(), "AmericasCup.sqlite")
#Q5
dbWriteTable(americas, "tournaments", tournaments,overwrite=TRUE)
dbWriteTable(americas, "races", races,overwrite=TRUE)
dbWriteTable(americas, "results", results,overwrite=TRUE)
#Q12
con <- file("pride-and-prejudice.txt","r", blocking= FALSE)
mydata = readLines(con)
length(mydata)
mydataClean = mydata[mydata!=""]
print(length(mydataClean))
parahraphs = grep("Darcy",mydataClean)
print(length(parahraphs))
parahraphs = grep("Mr. Darcy",mydataClean)
mydataClean[parahraphs[20]]
counter= 0
temp = unlist(strsplit(mydataClean," "))
numbers = grep("Darcy",temp)
length(numbers)
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30,units = "mins")
finalResult = format(finalResult,tz="Pacific/Auckland")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",finalResult,"\n")
#Q12
con <- file("pride-and-prejudice.txt","r", blocking= FALSE)
mydata = readLines(con)
length(mydata)
knitr::opts_chunk$set(echo = TRUE,error = TRUE)
library(DBI)
library(RSQLite)
# Q1
tournaments <- read.csv(file = "ACtournaments.csv")
races <- read.csv(file = "ACraces.csv", stringsAsFactors = FALSE)
results <- read.csv(file ="ACresults.csv")
head(tournaments)
head(results)
head(races)
#Q2
races$Racedate <- as.Date(races$Date,format = "%d-%b")
races$Racedate <-format(races$Racedate, "%m-%d")
head(races)
#any(is.na(races$Racedate))
#Q3
minDate  = min(races$Racedate, na.rm=TRUE)
maxDate = max(races$Racedate, na.rm=TRUE)
days = as.Date(maxDate, format="%m-%d")- as.Date(minDate, format="%m-%d")
cat("The first date of the race is : " ,minDate,"\n")
cat("The last date of the race is : " ,maxDate,"\n")
cat("The number of day in between : ", days)
#Q4
fn = "AmericasCup.sqlite"
if (file.exists(fn)){
file.remove(fn)
}
americas <- dbConnect(RSQLite::SQLite(), "AmericasCup.sqlite")
#Q5
dbWriteTable(americas, "tournaments", tournaments,overwrite=TRUE)
dbWriteTable(americas, "races", races,overwrite=TRUE)
dbWriteTable(americas, "results", results,overwrite=TRUE)
#Q12
con <- file("pride-and-prejudice.txt","r", blocking= FALSE)
mydata = readLines(con)
length(mydata)
mydataClean = mydata[mydata!=""]
print(length(mydataClean))
parahraphs = grep("Darcy",mydataClean)
print(length(parahraphs))
parahraphs = grep("Mr. Darcy",mydataClean)
mydataClean[parahraphs[20]]
counter= 0
temp = unlist(strsplit(mydataClean," "))
numbers = grep("Darcy",temp)
length(numbers)
cdssationTime = "1918-11-11 11:00"
cdssationTime = as.POSIXct(cdssationTime, tz="Europe/Paris")
original = format(cdssationTime,tz="Europe/Paris")
nzTime = format(cdssationTime, tz="Pacific/Auckland")
finalResult = as.POSIXct(nzTime,tz="Pacific/Auckland") - as.difftime(30,units = "mins")
finalResult = format(finalResult,tz="Pacific/Auckland")
cat("The time in Europe is",original,"\n")
cat("The time in NZ is",finalResult,"\n")
#Q12
con <- file("pride-and-prejudice.txt","r", blocking= FALSE)
mydata = readLines(con)
length(mydata)
#Q12
con <- file("pride-and-prejudice.txt","r)
mydata = readLines(con)
length(mydata)
#Q12
con <- file("pride-and-prejudice.txt","r")
mydata = readLines(con)
length(mydata)
#Q12
con <- file("pride-and-prejudice.txt","r", blocking= FALSE)
mydata = readLines(con)
length(mydata)
